function divides(n,k | res)
	mod(n,k) ~> res
	eqz(res) ~> res
	return res
end

function isPrime(n | k,tmp,cond,prime)

	1 ~> k,prime,cond
	
	while cond
		k+
		
		divides(n,k) ~> tmp
		while tmp
			0 ~> tmp
			0 ~> prime
		end
		
		mul(k,k) ~> tmp
		lt(tmp,n) ~> cond
		and(cond,prime) ~> cond
	end
	
	return prime
end

function primesUpTo(n | a,cond,tmp)
	1 ~> a
	1 ~> cond
	
	while cond
		a+
		isPrime(a) ~> tmp
		
		while tmp
			0 ~> tmp
			outDecimal(a)
			outSpace()
		end
		
		lt(a,n) ~> cond
	end
end

function fibonacciUpTo(n | a,b,c,cond)

	1 ~> a,b,cond
	
	outDecimal(a)
	outSpace()
	outDecimal(b)
	outSpace()

	add(a,b) ~> c
	
	lt(c,n) ~> cond
	while cond
	
		outDecimal(c)
		outSpace()
		
		add(a,b) ~> c
		b -> a
		c -> b
		
		lt(c,n) ~> cond
	end
end

function checker(w,h | x,y,tmp,cond)

	1 ~> x,cond
	
	lte(x,w) ~> cond
	while cond
		
		1 ~> y
		
		lte(y,h) ~> cond
		while cond
			
			add(x,y) ~> tmp
			mod(tmp,2) ~> tmp
			if(tmp, 32, 42) ~> tmp
			out tmp
		
			y+
			lte(y,h) ~> cond
		end
		
		outNewline()
		x+
		lte(x,w) ~> cond
	end
end

function main(a)

	checker(20,20)
end