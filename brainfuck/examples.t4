function divides(n,k | res)
	mod(n,k) ~> res
	eqz(res) ~> res
	return res
end

function isPrime(n | k,tmp,cond,prime)

	1 ~> k,prime,cond
	
	while cond
		k+
		
		divides(n,k) ~> tmp
		while tmp
			0 ~> tmp
			0 ~> prime
		end
		
		mul(k,k) ~> tmp
		lt(tmp,n) ~> cond
		and(cond,prime) ~> cond
	end
	
	return prime
end

function primesUpTo(n | a,cond,tmp)
	1 ~> a
	1 ~> cond
	
	while cond
		a+
		isPrime(a) ~> tmp
		
		while tmp
			0 ~> tmp
			outDecimal(a)
			outSpace()
		end
		
		lt(a,n) ~> cond
	end
end

function fibonacciUpTo(n | a,b,c,cond)

	1 ~> a,b,cond
	
	outDecimal(a)
	outSpace()
	outDecimal(b)
	outSpace()

	add(a,b) ~> c
	
	lt(c,n) ~> cond
	while cond
	
		outDecimal(c)
		outSpace()
		
		add(a,b) ~> c
		b -> a
		c -> b
		
		lt(c,n) ~> cond
	end
end

function checker(w,h | x,y,tmp,cond)

	1 ~> x,cond
	
	lte(x,w) ~> cond
	while cond
		
		1 ~> y
		
		lte(y,h) ~> cond
		while cond
			
			add(x,y) ~> tmp
			mod(tmp,2) ~> tmp
			if(tmp, 32, 42) ~> tmp
			out tmp
		
			y+
			lte(y,h) ~> cond
		end
		
		outNewline()
		x+
		lte(x,w) ~> cond
	end
end

function estimatePi(precision | c,rad2,N,x,y,cond,tmp1,tmp2,count)
	
	mul(precision,2) ~> N
	precision -> c
	mul(c,c) ~> rad2
	
	0 ~> count
	
	0 ~> x
	lte(x,N) ~> cond
	while cond
		
		0 ~> y
		lte(y,N) ~> cond
		while cond
			
			# Check (x-c)^2 + (y-c)^2 < rad^2
			
			diff(x,c) ~> tmp1
			mul(tmp1,tmp1) ~> tmp1
			
			diff(y,c) ~> tmp2
			mul(tmp2,tmp2) ~> tmp2
			
			tmp2 ~>> tmp1
			
			lt(tmp1,rad2) ~> tmp1
	
			# If so, increase count
			
			while tmp1
				0 ~> tmp1
				count+
			end
	
			y+
			lte(y,N) ~> cond
		end
		
		?
		x+
		lte(x,N) ~> cond
	end
	
	# A = pi * r^2, so pi = A / r^2
	# Multiplied by whatever number of digits we want to see
	
	mul(count,1000) ~> count
	div(count,rad2) ~> count
	
	return count
end

function main(a)

	estimatePi(50) ~> a
	outDecimal(a)
	outNewline()
end