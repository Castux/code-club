# Arithmetics

function add(a,b)
	b ~> a
	return a
end

function sub(a,b)
	while b
		b-
		a-
	end
	return a
end

function diff(a,b | cond)		# absolute difference
	
	# Decrement both simultaneously
	# until one is zero
	
	and(a,b) -> cond
	while cond
		a-
		b-
		and(a,b) -> cond
	end
	
	# If a == 0, return b, a otherwise
	
	a -> cond
	not(cond) -> cond
	while cond
		0 -> cond
		b -> a
	end
	
	return a
end

function mul(a,b | tmp)
	
	0 -> tmp					# with tmp = 0
	while a						# a times do
		a-						
		add(b,tmp) -> tmp		# tmp += b
	end
	
	return tmp
end

function pow(a,b | tmp)
	
	1 -> tmp					# with tmp = 1
	while a						# a times do
		a-
		mul(b,tmp) -> tmp		# tmp *= b
	end
	
	return tmp
end

function mul2(a | b)
	a -> b
	b ~> a
	return a
end

function mul4(a | b)
	a ~> b,b,b,b
	b ~> a
	return a
end

function pow2(n | tmp)
	1 -> tmp
	while n
		n-
		mul2(tmp) -> tmp?
	end
	return tmp
end

function max(a,b | bool)

	gt(b,a) -> bool
	while bool
		0 -> bool
		b -> a
	end
	return a
end

function min(a,b | bool)

	lt(b,a) -> bool
	while bool
		0 -> bool
		b -> a
	end
	return a
end

# Booleans and logic

function true(| res)
	1 -> res
	return res
end

function false(| res)
	0 -> res
	return res
end

function not(bool | res)

	1 -> res
	
	while bool
		0 -> bool
		0 -> res
	end
	return res
end

function and(a,b | cond)
	
	# if a then b else a

	a -> cond
	while cond
		0 -> cond
		b -> a
	end
	return a
end

function or(a,b | cond,not_cond)

	# a or b = not(not a and not b)
	
	# not(a) -> a
	# not(b) -> b

	# and(a,b) -> res
	# not(res) -> res
	# return res
	
	# if a then a else b
	
	a -> cond
	1 -> not_cond
	
	while cond
		0 -> cond
		0 -> not_cond
	end
	
	while not_cond
		0 -> not_cond
		b -> a
	end
	
	return a
end

# Comparisons

function eq(a,b | cond)

	diff(a,b) -> cond
	not(cond) -> cond
	return cond
end

function eqz(a | res)
	
	# this is really just the boolean not
	
	1 -> res
	while a
		0 -> a
		0 -> res
	end
	return res
end

function neqz(a | res)
	
	# this does nothing except normalize truthy values to 1
	
	0 -> res
	while a
		0 -> a
		1 -> res
	end
	return res
end

function gt(a,b | cond)
	
	# Decrement simultaneously until one is 0
	
	and(a,b) -> cond
	while cond
		a-
		b-
		and(a,b) -> cond
	end
	
	# Is a non zero?
	
	return a
end

function lt(a,b | cond)
	
	# Decrement simultaneously until one is 0
	
	and(a,b) -> cond
	while cond
		a-
		b-
		and(a,b) -> cond
	end
	
	# Is b non zero?
	
	return b
end


function main(a,b,c)
	
	max(13,20) -> a
	neqz(5,1) -> b
	
	?
end